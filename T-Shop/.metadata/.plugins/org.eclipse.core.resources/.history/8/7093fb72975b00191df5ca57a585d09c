package comp.GUIs;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;

import comp.users.User;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

public class LoginController implements Initializable {
	final static Logger logger = Logger.getLogger(LoginController.class);

	@FXML
	private Label titleLbl;

	@FXML
	private Button logBtn;

	@FXML
	private TextField userTxt;

	@FXML
	private PasswordField passTxt;

	@FXML
	private ComboBox<String> statusCmb;
	
	@FXML
	private Button signBtn;
	
	Stage stage1 = null;
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		statusCmb.getItems().addAll("admin", "client");
		signBtn.setOnAction(new EventHandler<ActionEvent>() {

			public void closeLogin() {
			     stage1 = (Stage) logBtn.getScene().getWindow();
			     stage1.close();
			}
			
			@Override
			public void handle(ActionEvent event) {
				User user = new User(userTxt.getText(), passTxt.getText(), statusCmb.getValue());
				try {
					Socket socket = new Socket("localhost", 6282);

					ByteArrayOutputStream bo = new ByteArrayOutputStream();
					ObjectOutputStream outFs = new ObjectOutputStream(bo);
					outFs.writeObject(user);
					outFs.flush();
					String test = bo.toString();
					
					ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(socket.getOutputStream()));
					ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));

					String toSendObject = "inregistrare " + test;

					out.writeObject(toSendObject);
					out.flush();
					System.out.println("Trimis");
					System.out.println(user.toString());

					int raspuns = (int) in.readObject();
					if (raspuns != 0) {
						logger.info("Datele personale au fost adaugate in baza de date.");
						if (user.getStatus().equals("client")) {
							try {
								System.out.println(raspuns);
								user.setUserId(raspuns);
								
								ClientController.client.setUserId(user.getUserId());
								ClientController.client.setUsername(user.getUsername());
								ClientController.client.setPassword(user.getPassword());
								ClientController.client.setStatus(user.getStatus());
								
								FXMLLoader fxmlLoader = new FXMLLoader(this.getClass().getResource("ClientWindow.fxml"));
								Parent root1 = (Parent) fxmlLoader.load();
								Stage stage = new Stage();
								stage.setScene(new Scene(root1));
								stage.show();
								closeLogin();

							} catch (Exception e) {
								e.printStackTrace();
							}
						} else {
							try {
								logger.info(raspuns);
								user.setUserId(raspuns);
								SalesPersonnelController.staff.setUserId(user.getUserId());
								SalesPersonnelController.staff.setUsername(user.getUsername());
								SalesPersonnelController.staff.setPassword(user.getPassword());
								SalesPersonnelController.staff.setStatus(user.getStatus());
								FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("SalesPersonnel.fxml"));
								Parent root1 = (Parent) fxmlLoader.load();
								Stage stage = new Stage();
								stage.setScene(new Scene(root1));
								stage.show();
								//closeLogin();
								
							} catch (Exception e) {
								e.printStackTrace();
							}
						}

					} else {
						logger.info("Datele personale au fost introduse incorect sau exista deja! Reincercati!");
						userTxt.setText("");
						passTxt.setText("");
					}
					socket.close();
				} catch (UnknownHostException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					
				}
			}
		});
		
		logBtn.setOnAction(new EventHandler<ActionEvent>() {

//			public void closeLogin() {
//			     stage1 = (Stage) logBtn.getScene().getWindow();
//			     stage1.close();
//			}
			
			@Override
			public void handle(ActionEvent event) {
				User user = new User(userTxt.getText(), passTxt.getText(), statusCmb.getValue());
				try {
					Socket socket = new Socket("localhost", 6282);

					ByteArrayOutputStream bo = new ByteArrayOutputStream();
					ObjectOutputStream outFs = new ObjectOutputStream(bo);
					outFs.writeObject(user);
					outFs.flush();
					String test = bo.toString();
					
					ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(socket.getOutputStream()));
					ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));

					String toSendObject = "autentificare " + test;

					out.writeObject(toSendObject);
					out.flush();
					System.out.println("Trimis");
					System.out.println(user.toString());

					int raspuns = (int) in.readObject();
					if (raspuns != 0) {
						logger.info("Datele personale sunt corecte.");
						if (user.getStatus().equals("client")) {
							try {
								System.out.println(raspuns);
								user.setUserId(raspuns);
								
								ClientController.client.setUserId(user.getUserId());
								ClientController.client.setUsername(user.getUsername());
								ClientController.client.setPassword(user.getPassword());
								ClientController.client.setStatus(user.getStatus());
								
								FXMLLoader fxmlLoader = new FXMLLoader(this.getClass().getResource("ClientWindow.fxml"));
								Parent root1 = (Parent) fxmlLoader.load();
								Stage stage = new Stage();
								stage.setScene(new Scene(root1));
								stage.show();
								//closeLogin();

							} catch (Exception e) {
								e.printStackTrace();
							}
						} else {
							try {
								logger.info(raspuns);
								user.setUserId(raspuns);
								SalesPersonnelController.staff.setUserId(user.getUserId());
								SalesPersonnelController.staff.setUsername(user.getUsername());
								SalesPersonnelController.staff.setPassword(user.getPassword());
								SalesPersonnelController.staff.setStatus(user.getStatus());
								FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("SalesPersonnel.fxml"));
								Parent root1 = (Parent) fxmlLoader.load();
								Stage stage = new Stage();
								stage.setScene(new Scene(root1));
								stage.show();
								//closeLogin();
								
							} catch (Exception e) {
								e.printStackTrace();
							}
						}

					} else {
						logger.info("Datele personale au fost introduse incorect! Reincercati!");
						userTxt.setText("");
						passTxt.setText("");
					}
					socket.close();
				} catch (UnknownHostException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					
				}
			}
		});
		
		
	}

	public String getUserName() {
		return userTxt.getText();
	}

	public String getPassword() {
		return passTxt.getText();
	}
	
	
}
